/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package project_euler.level01;

import java.util.ArrayList;
import java.util.HashMap;

/**
 *
 * @author Joonas Asikainen <tjasikai@mac.com>
 */
public class Problem044 {

    public static void main(String[] args) {

//        System.out.println("#---------");
        final int max = 20000;
        final HashMap<Long, Integer> map = new HashMap<Long, Integer>(2 * max);
        final ArrayList<Long> list = new ArrayList<Long>(max);
        for (int n = 1; n <= max; n++) {
            final long pn = getPentagonal(n);
//            System.out.println(n + "\t" + pn);
            map.put(pn, n);
            list.add(pn);
        }
//        System.out.println("#---------");
        int cnt = 0;
        long dmin = Long.MAX_VALUE;
        for (int i = 0; i < max; i++) {
            final long pni = list.get(i);
            for (int j = i + 1; j < max; j++) {
                if (++cnt % 10000000 == 0) {
                    System.out.println("# processed " + cnt + " pairs so far.");
                }
                final long pnj = list.get(j);
                final long psum = pni + pnj;
                if (map.containsKey(psum)) {
                    final long pdiff = pnj - pni;
                    if (map.containsKey(pdiff)) {
                        System.out.println("# sum and diff are Pentagonal; "+i + "\t" + j + "\t" + pni + "\t" + pnj);
                        final long d = java.lang.Math.abs(pni - pnj);
                        if (d < dmin) {
                            System.out.println("# new d_min; "+i + "\t" + j + "\t" + pni + "\t" + pnj + "\t" + d);
                            dmin = d;
                        }
                    }
                }
            }
        }
        System.out.println("# dmin = " + dmin);
    }

    private static long getPentagonal(long n) {
        if (n < 1) {
            return 0;
        }
        final long pn = (n * (3 * n - 1)) / 2;
        return pn;
    }
}
// Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2.
// The first ten pentagonal numbers are:
//
// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//
// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However,
// their difference, 70 - 22 = 48, is not pentagonal.
//
// Find the pair of pentagonal numbers, Pj and Pk, for which their
// sum and difference is pentagonal and D = |Pk -S Pj| is minimised;
// what is the value of D?

